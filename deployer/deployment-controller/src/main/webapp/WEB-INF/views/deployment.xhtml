<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2020 Payara Foundation and/or its affiliates. All rights reserved.
  ~
  ~  The contents of this file are subject to the terms of either the GNU
  ~  General Public License Version 2 only ("GPL") or the Common Development
  ~  and Distribution License("CDDL") (collectively, the "License").  You
  ~  may not use this file except in compliance with the License.  You can
  ~  obtain a copy of the License at
  ~  https://github.com/payara/Payara/blob/master/LICENSE.txt
  ~  See the License for the specific
  ~  language governing permissions and limitations under the License.
  ~
  ~  When distributing the software, include this License Header Notice in each
  ~  file and include the License file at glassfish/legal/LICENSE.txt.
  ~
  ~  GPL Classpath Exception:
  ~  The Payara Foundation designates this particular file as subject to the "Classpath"
  ~  exception as provided by the Payara Foundation in the GPL Version 2 section of the License
  ~  file that accompanied this code.
  ~
  ~  Modifications:
  ~  If applicable, add the following below the License Header, with the fields
  ~  enclosed by brackets [] replaced by your own identifying information:
  ~  "Portions Copyright [year] [name of copyright owner]"
  ~
  ~  Contributor(s):
  ~  If you wish your version of this file to be governed by only the CDDL or
  ~  only the GPL Version 2, indicate your decision by adding "[Contributor]
  ~  elects to include this software in this distribution under the [CDDL or GPL
  ~  Version 2] license."  If you don't indicate a single choice of license, a
  ~  recipient has the option to distribute your version of this file under
  ~  either the CDDL, the GPL Version 2 or to extend the choice of license to
  ~  its licensees as provided above.  However, if you add GPL Version 2 code
  ~  and therefore, elected the GPL Version 2 license, then the option applies
  ~  only if the new code is made subject to such option by the copyright
  ~  holder.
-->
<ui:composition template="layout.xhtml" xmlns="http://www.w3.org/1999/xhtml"
                xmlns:h="http://xmlns.jcp.org/jsf/html"
                xmlns:ui="http://xmlns.jcp.org/jsf/facelets" xmlns:c="http://xmlns.jcp.org/jsp/jstl/core"
                xmlns:f="http://xmlns.jcp.org/jsf/core"
                xmlns:comp="http://xmlns.jcp.org/jsf/composite/cloud-deploy">
    <ui:define name="main">
        <nav>
            <h4>Stage and project: #{deployment.namespace.stage} / #{deployment.namespace.project}</h4>
        </nav>
        <h2>Deployment #{deployment.name}</h2>
        <main>
            <div id="status">
                <c:choose>
                    <c:when test="#{deployment.failed}">
                        <section class="failed secondary-white">
                        <h3>Failed</h3>
                        <p>#{deployment.completionMessage}</p>
                        </section>
                    </c:when>
                    <c:when test="#{deployment.ready}">
                        <section class="success secondary-white">
                            <h3>Success!</h3>
                            <p>#{deployment.completionMessage}</p>
                            <div class="result secondary-white">
                                <a href="#{deployment.endpoint}" target="_blank" class="button highlight">View your app</a>
                            </div>
                        </section>
                    </c:when>
                    <c:when test="#{deployment.configurable}">
                        <section class="pending secondary-white"><h3>Configuration pending</h3>
                        <c:choose>
                            <c:when test="${deployment.configurationComplete}">
                                <button onclick="document.getElementById('config').submit()">Confirm configured values</button>
                            </c:when> 
                            <c:otherwise>
                                <p>Some of configuration objects below need your attention</p>
                            </c:otherwise>
                        </c:choose>
                        </section>

                        <form id="config" action="${mvc.uri('ConfigurationResource#configAll', { 'deploymentId':deployment.id })}" method="post" up-target="#status" enctype="multipart/form-data">
                        <c:forEach items="${config.order}" var="configKey">
                            <comp:edit-single-config config-id="${configKey.id}" kind="${configKey.kind}"
                                                     config="${config.kind[configKey.kind][configKey.id]}"
                                                     />
                        </c:forEach>
                            <button class="highlight">Confirm configured values</button>
                        </form>
                    </c:when>
                    <c:otherwise>
                        <section class="pending secondary-white">
                            <h3>Deploying...</h3>
                            <progress/>
                            <p>#{lastStateTimestamp} #{deployment.lastChange}</p>
                        </section>
                    </c:otherwise>
                </c:choose>

            </div>

            <details class="hidden" id="logcontainer">
                <summary>Container log</summary>
                <textarea id="log" readonly="readonly" rows="25"></textarea>
            </details>

            <form id="refreshform" up-target="#status" up-cache="false" up-history="false" method="get" class="hidden">
                <button id="refresh" type="submit">Refresh</button>
            </form>
        </main>

        <script type="text/javascript">
            //<![CDATA[
            try {
                const eventStream = new EventSource(window.location);
                eventStream.onmessage = (event) => {
                    if (event.data) {
                        // untyped event represent deployment event
                        const payload = JSON.parse(event.data);
                        console.log(event);
                        if (payload.kind === "CONFIGURATION_SET") {
                            // with configuration set this handler clashes with
                            // form submission, therefore we skip this
                            return;
                        }
                        document.getElementById("refresh").click();
                    }
                }
                eventStream.addEventListener("state", (event) => {
                    console.log("state event", event);
                    const payload = JSON.parse(event.data);
                    if (payload.complete) {
                        eventStream.close();
                    }
                })
                eventStream.addEventListener("log", (event) => {
                    console.log("log event", event);
                    const container = document.getElementById('logcontainer');
                    container.className=container.className.replace("hidden","");
                    const el = document.getElementById('log');
                    el.value = el.value + event.data;
                    el.scrollTop = el.scrollHeight;
                });
            } catch (e) {
                console.log("Could not connect to SSE stream");
            }
            //]]>
        </script>
    </ui:define>
</ui:composition>
